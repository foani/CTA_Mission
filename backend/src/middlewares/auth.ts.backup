/**
 * Authentication Middleware
 * 인증 관련 미들웨어
 * 
 * 주요 기능:
 * - JWT 토큰 검증
 * - 사용자 인증 상태 확인
 * - Web3Auth 토큰 검증
 * - 요청 객체에 사용자 정보 추가
 */

import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import { AppError } from './errorHandler';
import { logger } from '../utils/logger';

export interface AuthenticatedRequest extends Request {
  user?: {
    id: string;
    walletAddress?: string;
    email?: string;
    provider?: string;
    isVerified?: boolean;
  };
}

/**
 * JWT 토큰 검증 미들웨어
 * Authorization 헤더에서 Bearer 토큰을 추출하고 검증
 */
export async function authMiddleware(
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
): Promise<void> {
  try {
    // Authorization 헤더 확인
    const authHeader = req.headers.authorization;
    
    if (!authHeader) {
      throw new AppError('인증 토큰이 필요합니다', 401);
    }

    // Bearer 토큰 형식 확인
    const tokenParts = authHeader.split(' ');
    if (tokenParts.length !== 2 || tokenParts[0] !== 'Bearer') {
      throw new AppError('잘못된 토큰 형식입니다', 401);
    }

    const token = tokenParts[1];

    // JWT 시크릿 키 확인
    const jwtSecret = process.env.JWT_SECRET;
    if (!jwtSecret) {
      logger.error('JWT_SECRET is not configured');
      throw new AppError('서버 설정 오류입니다', 500);
    }

    // 토큰 검증
    const decoded = jwt.verify(token, jwtSecret) as any;
    
    // 토큰 만료 확인
    if (decoded.exp && Date.now() >= decoded.exp * 1000) {
      throw new AppError('토큰이 만료되었습니다', 401);
    }

    // 필수 사용자 정보 확인
    if (!decoded.userId) {
      throw new AppError('잘못된 토큰입니다', 401);
    }

    // 사용자 정보를 요청 객체에 추가
    req.user = {
      id: decoded.userId,
      walletAddress: decoded.walletAddress,
      email: decoded.email,
      provider: decoded.provider,
      isVerified: decoded.isVerified || false
    };

    logger.info(`User authenticated: ${req.user.id}`, {
      userId: req.user.id,
      provider: req.user.provider,
      endpoint: `${req.method} ${req.originalUrl}`
    });

    next();
  } catch (error) {
    logger.error('Authentication failed:', {
      error: error instanceof Error ? error.message : 'Unknown error',
      endpoint: `${req.method} ${req.originalUrl}`,
      ip: req.ip,
      userAgent: req.get('User-Agent')
    });

    if (error instanceof jwt.JsonWebTokenError) {
      return next(new AppError('잘못된 토큰입니다', 401));
    }
    
    if (error instanceof jwt.TokenExpiredError) {
      return next(new AppError('토큰이 만료되었습니다', 401));
    }

    next(error);
  }
}

/**
 * 선택적 인증 미들웨어
 * 토큰이 있으면 검증하고, 없어도 계속 진행
 */
export async function optionalAuthMiddleware(
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
): Promise<void> {
  try {
    const authHeader = req.headers.authorization;
    
    // 토큰이 없으면 그냥 진행
    if (!authHeader) {
      return next();
    }

    // 토큰이 있으면 검증 시도
    await authMiddleware(req, res, next);
  } catch (error) {
    // 선택적 인증에서는 에러가 발생해도 계속 진행
    logger.warn('Optional authentication failed, continuing without auth:', {
      error: error instanceof Error ? error.message : 'Unknown error',
      endpoint: `${req.method} ${req.originalUrl}`
    });
    next();
  }
}

/**
 * Web3Auth 토큰 검증 미들웨어
 * Web3Auth에서 발급한 토큰을 검증
 */
export async function web3AuthMiddleware(
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
): Promise<void> {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader) {
      throw new AppError('Web3Auth 토큰이 필요합니다', 401);
    }

    const tokenParts = authHeader.split(' ');
    if (tokenParts.length !== 2 || tokenParts[0] !== 'Bearer') {
      throw new AppError('잘못된 토큰 형식입니다', 401);
    }

    const token = tokenParts[1];

    // Web3Auth 토큰 검증 로직
    // 실제 환경에서는 Web3Auth SDK를 사용하여 검증
    const isValidWeb3AuthToken = await validateWeb3AuthToken(token);
    
    if (!isValidWeb3AuthToken) {
      throw new AppError('유효하지 않은 Web3Auth 토큰입니다', 401);
    }

    // 토큰에서 사용자 정보 추출
    const userInfo = await extractUserInfoFromWeb3AuthToken(token);
    
    req.user = {
      id: userInfo.userId,
      walletAddress: userInfo.walletAddress,
      email: userInfo.email,
      provider: 'web3auth',
      isVerified: true
    };

    logger.info(`Web3Auth user authenticated: ${req.user.id}`, {
      userId: req.user.id,
      walletAddress: req.user.walletAddress,
      endpoint: `${req.method} ${req.originalUrl}`
    });

    next();
  } catch (error) {
    logger.error('Web3Auth authentication failed:', error);
    next(error);
  }
}

/**
 * 관리자 권한 확인 미들웨어
 * 인증 후에 사용하여 관리자 권한을 확인
 */
export function adminMiddleware(
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
): void {
  try {
    if (!req.user) {
      throw new AppError('인증이 필요합니다', 401);
    }

    // 관리자 이메일 목록 (환경변수에서 관리)
    const adminEmails = process.env.ADMIN_EMAILS?.split(',') || [];
    
    if (!req.user.email || !adminEmails.includes(req.user.email)) {
      throw new AppError('관리자 권한이 필요합니다', 403);
    }

    logger.info(`Admin access granted: ${req.user.email}`, {
      userId: req.user.id,
      email: req.user.email,
      endpoint: `${req.method} ${req.originalUrl}`
    });

    next();
  } catch (error) {
    logger.error('Admin authorization failed:', error);
    next(error);
  }
}

/**
 * Web3Auth 토큰 검증 함수
 * 실제 환경에서는 Web3Auth SDK 사용
 */
async function validateWeb3AuthToken(token: string): Promise<boolean> {
  try {
    // 개발 환경에서는 기본적인 JWT 검증
    if (process.env.NODE_ENV === 'development') {
      const jwtSecret = process.env.JWT_SECRET || 'dev-secret';
      jwt.verify(token, jwtSecret);
      return true;
    }

    // 실제 환경에서는 Web3Auth API 호출
    // const response = await fetch('https://api.web3auth.io/verify', {
    //   method: 'POST',
    //   headers: {
    //     'Content-Type': 'application/json',
    //     'Authorization': `Bearer ${token}`
    //   }
    // });
    // return response.ok;

    return true; // 임시로 항상 성공
  } catch (error) {
    logger.error('Web3Auth token validation failed:', error);
    return false;
  }
}

/**
 * Web3Auth 토큰에서 사용자 정보 추출
 */
async function extractUserInfoFromWeb3AuthToken(token: string): Promise<{
  userId: string;
  walletAddress?: string;
  email?: string;
}> {
  try {
    // 개발 환경에서는 JWT 디코딩
    if (process.env.NODE_ENV === 'development') {
      const jwtSecret = process.env.JWT_SECRET || 'dev-secret';
      const decoded = jwt.verify(token, jwtSecret) as any;
      
      return {
        userId: decoded.userId || decoded.sub,
        walletAddress: decoded.walletAddress,
        email: decoded.email
      };
    }

    // 실제 환경에서는 Web3Auth API 호출
    // const response = await fetch('https://api.web3auth.io/userinfo', {
    //   headers: { 'Authorization': `Bearer ${token}` }
    // });
    // const userInfo = await response.json();
    // return userInfo;

    // 임시 반환값
    return {
      userId: 'temp-user-id',
      walletAddress: '0x1234567890123456789012345678901234567890',
      email: 'user@example.com'
    };
  } catch (error) {
    logger.error('Failed to extract user info from Web3Auth token:', error);
    throw new AppError('토큰에서 사용자 정보를 추출할 수 없습니다', 401);
  }
}

/**
 * 토큰 생성 유틸리티 함수
 */
export function generateJWTToken(payload: {
  userId: string;
  walletAddress?: string;
  email?: string;
  provider?: string;
}): string {
  const jwtSecret = process.env.JWT_SECRET;
  if (!jwtSecret) {
    throw new AppError('JWT_SECRET is not configured', 500);
  }

  return jwt.sign(
    {
      ...payload,
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24시간
    },
    jwtSecret
  );
}

/**
 * 개발용 더미 사용자 생성 미들웨어
 * 개발 환경에서만 사용
 */
export function devAuthMiddleware(
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
): void {
  if (process.env.NODE_ENV !== 'development') {
    return next(new AppError('이 기능은 개발 환경에서만 사용할 수 있습니다', 403));
  }

  // 개발용 더미 사용자 정보
  req.user = {
    id: 'dev-user-123',
    walletAddress: '0x742d35Cc6634C0532925a3b8D9c83f1b6a0d2222',
    email: 'dev@example.com',
    provider: 'development',
    isVerified: true
  };

  logger.info('Development user authenticated', {
    userId: req.user.id,
    endpoint: `${req.method} ${req.originalUrl}`
  });

  next();
}

/**
 * Bearer 토큰 추출 유틸리티 함수
 */
function extractBearerToken(authHeader?: string): string | null {
  if (!authHeader) return null;
  const parts = authHeader.split(' ');
  if (parts.length !== 2 || parts[0] !== 'Bearer') return null;
  return parts[1];
}