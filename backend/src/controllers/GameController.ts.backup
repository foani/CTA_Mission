// src/controllers/GameController.ts

import { Request, Response } from 'express';
import { Repository } from 'typeorm';
import { AppDataSource } from '../config/database';
import { Game, GameStatus } from '../models/Game';
import { GamePrediction } from '../models/GamePrediction';
import { GameScore } from '../models/GameScore';
import { User } from '../models/User';
import { PriceService } from '../services/PriceService';
import GameService from '../services/GameService';

// AuthenticatedRequest 타입 정의
interface AuthenticatedRequest extends Request {
  user?: {
    id: string;
    walletAddress: string;
    role: string;
  };
}

/**
 * 게임 관련 API 컨트롤러
 * 업다운 예측 게임, 점수 관리, 게임 상태 관리
 */
export class GameController {
  private gameRepository: Repository<Game>;
  private predictionRepository: Repository<GamePrediction>;
  private scoreRepository: Repository<GameScore>;
  private userRepository: Repository<User>;
  private priceService: PriceService;
  private gameService: GameService;

  constructor() {
    this.gameRepository = AppDataSource.getRepository(Game);
    this.predictionRepository = AppDataSource.getRepository(GamePrediction);
    this.scoreRepository = AppDataSource.getRepository(GameScore);
    this.userRepository = AppDataSource.getRepository(User);
    this.priceService = new PriceService();
    this.gameService = new GameService();
  }

  /**
   * 현재 활성 게임 정보 조회
   * GET /api/game/current
   */
  async getCurrentGame(req: Request, res: Response): Promise<void> {
    try {
      const currentGame = await this.gameRepository.findOne({
        where: { status: GameStatus.ACTIVE },
        order: { createdAt: 'DESC' }
      });

      if (!currentGame) {
        res.status(404).json({
          success: false,
          message: '현재 진행 중인 게임이 없습니다.'
        });
        return;
      }

      // 현재 가격 정보 추가
      const currentPrice = await this.priceService.getCurrentPriceBySymbol(currentGame.symbol);

      res.json({
        success: true,
        data: {
          ...currentGame,
          currentPrice: currentPrice?.price || 0,
          priceChange: currentPrice?.priceChange24h || 0
        }
      });
    } catch (error) {
      console.error('현재 게임 조회 오류:', error);
      res.status(500).json({
        success: false,
        message: '서버 오류가 발생했습니다.'
      });
    }
  }

  /**
   * 게임 예측 제출
   * POST /api/game/:gameId/predict
   */
  async submitPrediction(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const { gameId } = req.params;
      const { direction, confidence } = req.body;
      const userId = req.user?.id;

      if (!userId) {
        res.status(401).json({
          success: false,
          message: '인증이 필요합니다.'
        });
        return;
      }

      // 게임 존재 확인
      const game = await this.gameRepository.findOne({
        where: { id: gameId }
      });
      
      if (!game) {
        res.status(404).json({
          success: false,
          message: '게임을 찾을 수 없습니다.'
        });
        return;
      }
      
      // 게임 상태 확인
      if (game.status !== GameStatus.ACTIVE) {
        res.status(400).json({
          success: false,
          message: '예측 제출이 불가능한 게임 상태입니다.'
        });
        return;
      }

      // 중복 예측 확인
      const existingPrediction = await this.predictionRepository.findOne({
        where: { gameId, userId }
      });

      if (existingPrediction) {
        res.status(400).json({
          success: false,
          message: '이미 예측을 제출했습니다.'
        });
        return;
      }

      // 예측 저장
      const prediction = this.predictionRepository.create({
        gameId,
        userId,
        direction: direction.toUpperCase(), // 'UP' 또는 'DOWN'
        confidence: confidence || 1,
        predictedAt: new Date(),
        startPrice: game.startPrice
      });

      await this.predictionRepository.save(prediction);

      res.json({
        success: true,
        message: '예측이 성공적으로 제출되었습니다.',
        data: prediction
      });
    } catch (error) {
      console.error('예측 제출 오류:', error);
      res.status(500).json({
        success: false,
        message: '서버 오류가 발생했습니다.'
      });
    }
  }

  /**
   * 게임 결과 확인 및 점수 계산
   * POST /api/game/:gameId/result
   */
  async calculateGameResult(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const { gameId } = req.params;
      const userId = req.user?.id;

      if (!userId) {
        res.status(401).json({
          success: false,
          message: '인증이 필요합니다.'
        });
        return;
      }

      const result = await this.gameService.calculateGameResult(gameId, userId);

      res.json({
        success: true,
        data: result
      });
    } catch (error) {
      console.error('게임 결과 계산 오류:', error);
      res.status(500).json({
        success: false,
        message: '서버 오류가 발생했습니다.'
      });
    }
  }

  /**
   * 사용자의 게임 기록 조회
   * GET /api/game/history
   */
  async getUserGameHistory(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const userId = req.user?.id;
      const { page = 1, limit = 20 } = req.query;

      if (!userId) {
        res.status(401).json({
          success: false,
          message: '인증이 필요합니다.'
        });
        return;
      }

      const skip = (Number(page) - 1) * Number(limit);

      const [predictions, total] = await this.predictionRepository.findAndCount({
        where: { userId },
        relations: ['game'],
        order: { predictedAt: 'DESC' },
        skip,
        take: Number(limit)
      });

      res.json({
        success: true,
        data: {
          predictions,
          pagination: {
            page: Number(page),
            limit: Number(limit),
            total,
            pages: Math.ceil(total / Number(limit))
          }
        }
      });
    } catch (error) {
      console.error('게임 기록 조회 오류:', error);
      res.status(500).json({
        success: false,
        message: '서버 오류가 발생했습니다.'
      });
    }
  }

  /**
   * 사용자 점수 조회
   * GET /api/game/score
   */
  async getUserScore(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const userId = req.user?.id;

      if (!userId) {
        res.status(401).json({
          success: false,
          message: '인증이 필요합니다.'
        });
        return;
      }

      const score = await this.scoreRepository.findOne({
        where: { userId },
        relations: ['user']
      });

      if (!score) {
        // 점수 레코드가 없으면 새로 생성
        const newScore = this.scoreRepository.create({
          userId,
          totalScore: 0,
          correctPredictions: 0,
          totalPredictions: 0,
          streak: 0,
          bestStreak: 0,
          rank: 0
        });

        await this.scoreRepository.save(newScore);

        res.json({
          success: true,
          data: newScore
        });
        return;
      }

      res.json({
        success: true,
        data: score
      });
    } catch (error) {
      console.error('점수 조회 오류:', error);
      res.status(500).json({
        success: false,
        message: '서버 오류가 발생했습니다.'
      });
    }
  }

  /**
   * 새 게임 생성 (관리자 전용)
   * POST /api/game/create
   */
  async createGame(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const { symbol, duration = 300 } = req.body; // 기본 5분
      const userId = req.user?.id;
      const userRole = req.user?.role;

      if (!userId || userRole !== 'ADMIN') {
        res.status(403).json({
          success: false,
          message: '관리자 권한이 필요합니다.'
        });
        return;
      }

      // 기존 활성 게임 종료
      await this.gameRepository.update(
        { status: GameStatus.ACTIVE },
        { status: GameStatus.COMPLETED, endTime: new Date() }
      );

      // 현재 가격 조회
      const currentPrice = await this.priceService.getCurrentPriceBySymbol(symbol);

      if (!currentPrice) {
        res.status(400).json({
          success: false,
          message: '가격 정보를 조회할 수 없습니다.'
        });
        return;
      }

      // 새 게임 생성
      const endTime = new Date();
      endTime.setSeconds(endTime.getSeconds() + duration);

      const newGame = this.gameRepository.create({
        symbol: symbol.toUpperCase(),
        startTime: new Date(),
        endTime,
        duration,
        startPrice: currentPrice.price,
        status: GameStatus.ACTIVE,
        createdBy: userId
      });

      await this.gameRepository.save(newGame);

      res.json({
        success: true,
        message: '새 게임이 생성되었습니다.',
        data: newGame
      });
    } catch (error) {
      console.error('게임 생성 오류:', error);
      res.status(500).json({
        success: false,
        message: '서버 오류가 발생했습니다.'
      });
    }
  }

  /**
   * 게임 목록 조회
   * GET /api/game/list
   */
  async getGameList(req: Request, res: Response): Promise<void> {
    try {
      const { page = 1, limit = 20, status } = req.query;
      const skip = (Number(page) - 1) * Number(limit);

      const whereCondition: any = {};
      if (status) {
        whereCondition.status = status;
      }
      
      const [games, total] = await this.gameRepository.findAndCount({
        where: whereCondition,
        order: { createdAt: 'DESC' },
        skip,
        take: Number(limit)
      });
      res.json({
        success: true,
        data: {
          games,
          pagination: {
            page: Number(page),
            limit: Number(limit),
            total,
            pages: Math.ceil(total / Number(limit))
          }
        }
      });
    } catch (error) {
      console.error('게임 목록 조회 오류:', error);
      res.status(500).json({
        success: false,
        message: '서버 오류가 발생했습니다.'
      });
    }
  }
}