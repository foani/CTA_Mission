import { Request, Response } from 'express';
import { PriceService } from '../services/PriceService';

export class PriceController {
  private priceService = new PriceService();

  /**
   * 현재 가격 조회
   */
  async getCurrentPrice(req: Request, res: Response): Promise<void> {
    try {
      const { symbol } = req.params;

      if (!symbol) {
        res.status(400).json({
          success: false,
          message: '토큰 심볼이 필요합니다.'
        });
        return;
      }

      const priceData = await this.priceService.getCurrentPrice(symbol.toUpperCase());

      if (!priceData) {
        res.status(404).json({
          success: false,
          message: '가격 정보를 찾을 수 없습니다.'
        });
        return;
      }

      res.json({
        success: true,
        data: priceData,
        message: '현재 가격 조회 성공'
      });
    } catch (error) {
      console.error('가격 조회 실패:', error);
      res.status(500).json({
        success: false,
        message: '가격 조회 중 오류가 발생했습니다.'
      });
    }
  }

  /**
   * 여러 토큰의 현재 가격 조회
   */
  async getMultiplePrices(req: Request, res: Response): Promise<void> {
    try {
      const { symbols } = req.query;

      if (!symbols || typeof symbols !== 'string') {
        res.status(400).json({
          success: false,
          message: '토큰 심볼 목록이 필요합니다. (예: BTC,ETH,CTA)'
        });
        return;
      }

      const symbolList = symbols.split(',').map(s => s.trim().toUpperCase());
      const pricePromises = symbolList.map(symbol => 
        this.priceService.getCurrentPrice(symbol)
      );

      const priceResults = await Promise.allSettled(pricePromises);
      const prices: Record<string, any> = {};

      symbolList.forEach((symbol, index) => {
        const result = priceResults[index];
        if (result.status === 'fulfilled' && result.value) {
          prices[symbol] = result.value;
        } else {
          prices[symbol] = null;
        }
      });

      res.json({
        success: true,
        data: prices,
        message: '다중 가격 조회 성공'
      });
    } catch (error) {
      console.error('다중 가격 조회 실패:', error);
      res.status(500).json({
        success: false,
        message: '다중 가격 조회 중 오류가 발생했습니다.'
      });
    }
  }

  /**
   * 가격 히스토리 조회
   */
  async getPriceHistory(req: Request, res: Response): Promise<void> {
    try {
      const { symbol } = req.params;
      const { days = '1', interval = '1h' } = req.query;

      if (!symbol) {
        res.status(400).json({
          success: false,
          message: '토큰 심볼이 필요합니다.'
        });
        return;
      }

      const historyData = await this.priceService.getPriceHistory(
        symbol.toUpperCase(), 
        Number(days), 
        interval as string
      );

      if (!historyData || historyData.length === 0) {
        res.status(404).json({
          success: false,
          message: '가격 히스토리를 찾을 수 없습니다.'
        });
        return;
      }

      res.json({
        success: true,
        data: {
          symbol: symbol.toUpperCase(),
          interval,
          days: Number(days),
          prices: historyData
        },
        message: '가격 히스토리 조회 성공'
      });
    } catch (error) {
      console.error('가격 히스토리 조회 실패:', error);
      res.status(500).json({
        success: false,
        message: '가격 히스토리 조회 중 오류가 발생했습니다.'
      });
    }
  }

  /**
   * 지원되는 토큰 목록 조회
   */
  async getSupportedTokens(req: Request, res: Response): Promise<void> {
    try {
      const supportedTokens = await this.priceService.getSupportedTokens();

      res.json({
        success: true,
        data: supportedTokens,
        message: '지원 토큰 목록 조회 성공'
      });
    } catch (error) {
      console.error('지원 토큰 조회 실패:', error);
      res.status(500).json({
        success: false,
        message: '지원 토큰 목록 조회 중 오류가 발생했습니다.'
      });
    }
  }

  /**
   * 가격 변동률 조회
   */
  async getPriceChanges(req: Request, res: Response): Promise<void> {
    try {
      const { symbol } = req.params;
      const { period = '24h' } = req.query;

      if (!symbol) {
        res.status(400).json({
          success: false,
          message: '토큰 심볼이 필요합니다.'
        });
        return;
      }

      const changes = await this.priceService.getPriceChanges(
        symbol.toUpperCase(), 
        period as string
      );

      if (!changes) {
        res.status(404).json({
          success: false,
          message: '가격 변동 정보를 찾을 수 없습니다.'
        });
        return;
      }

      res.json({
        success: true,
        data: changes,
        message: '가격 변동률 조회 성공'
      });
    } catch (error) {
      console.error('가격 변동률 조회 실패:', error);
      res.status(500).json({
        success: false,
        message: '가격 변동률 조회 중 오류가 발생했습니다.'
      });
    }
  }

  /**
   * 실시간 가격 스트림 시작 (WebSocket용)
   */
  async startPriceStream(req: Request, res: Response): Promise<void> {
    try {
      const { symbols } = req.body;

      if (!symbols || !Array.isArray(symbols)) {
        res.status(400).json({
          success: false,
          message: '토큰 심볼 배열이 필요합니다.'
        });
        return;
      }

      // 실시간 가격 스트림 시작 로직
      const streamId = await this.priceService.startPriceStream(symbols);

      res.json({
        success: true,
        data: { streamId },
        message: '실시간 가격 스트림이 시작되었습니다.'
      });
    } catch (error) {
      console.error('가격 스트림 시작 실패:', error);
      res.status(500).json({
        success: false,
        message: '가격 스트림 시작 중 오류가 발생했습니다.'
      });
    }
  }

  /**
   * 실시간 가격 스트림 중지
   */
  async stopPriceStream(req: Request, res: Response): Promise<void> {
    try {
      const { streamId } = req.params;

      if (!streamId) {
        res.status(400).json({
          success: false,
          message: '스트림 ID가 필요합니다.'
        });
        return;
      }

      await this.priceService.stopPriceStream(streamId);

      res.json({
        success: true,
        message: '실시간 가격 스트림이 중지되었습니다.'
      });
    } catch (error) {
      console.error('가격 스트림 중지 실패:', error);
      res.status(500).json({
        success: false,
        message: '가격 스트림 중지 중 오류가 발생했습니다.'
      });
    }
  }

  /**
   * 가격 API 상태 확인
   */
  async getApiStatus(req: Request, res: Response): Promise<void> {
    try {
      const status = await this.priceService.getApiStatus();

      res.json({
        success: true,
        data: status,
        message: '가격 API 상태 조회 성공'
      });
    } catch (error) {
      console.error('API 상태 조회 실패:', error);
      res.status(500).json({
        success: false,
        message: 'API 상태 조회 중 오류가 발생했습니다.'
      });
    }
  }

  /**
   * 특정 시점의 가격 조회
   */
  async getPriceAtTime(req: Request, res: Response): Promise<void> {
    try {
      const { symbol } = req.params;
      const { timestamp } = req.query;

      if (!symbol || !timestamp) {
        res.status(400).json({
          success: false,
          message: '토큰 심볼과 타임스탬프가 필요합니다.'
        });
        return;
      }

      const priceData = await this.priceService.getPriceAtTime(
        symbol.toUpperCase(), 
        new Date(Number(timestamp))
      );

      if (!priceData) {
        res.status(404).json({
          success: false,
          message: '해당 시점의 가격 정보를 찾을 수 없습니다.'
        });
        return;
      }

      res.json({
        success: true,
        data: priceData,
        message: '특정 시점 가격 조회 성공'
      });
    } catch (error) {
      console.error('특정 시점 가격 조회 실패:', error);
      res.status(500).json({
        success: false,
        message: '특정 시점 가격 조회 중 오류가 발생했습니다.'
      });
    }
  }

  /**
   * 가격 통계 조회
   */
  async getPriceStats(req: Request, res: Response): Promise<void> {
    try {
      const { symbol } = req.params;
      const { period = '24h' } = req.query;

      if (!symbol) {
        res.status(400).json({
          success: false,
          message: '토큰 심볼이 필요합니다.'
        });
        return;
      }

      const stats = await this.priceService.getPriceStats(
        symbol.toUpperCase(), 
        period as string
      );

      if (!stats) {
        res.status(404).json({
          success: false,
          message: '가격 통계 정보를 찾을 수 없습니다.'
        });
        return;
      }

      res.json({
        success: true,
        data: stats,
        message: '가격 통계 조회 성공'
      });
    } catch (error) {
      console.error('가격 통계 조회 실패:', error);
      res.status(500).json({
        success: false,
        message: '가격 통계 조회 중 오류가 발생했습니다.'
      });
    }
  }
}